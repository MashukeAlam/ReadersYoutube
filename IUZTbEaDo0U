all right so python is one of the best beginner-friendly programming languages out there that can really help you kick-start your career as a programmer so today i will go through how you can learn python as fast as possible and i have 10 really good tips for how you can learn python fast and how you can grow as an effective programmer so let's go if this is your first programming language it can be a bit overwhelming at the start so you might have an idea of where you want to start but you may lack a complete structure on how to actually achieve your goal there are different ways to learn a language and everyone has their own method for achieving the same result okay so first understand the why as in why should you learn python and is python the right language for you to actually learn so python can be used in lots of different various fields like machine learning data science web development game development and lots of other things so figuring out why you're actually learning python is going to be a really good thing because it will give you a clear end goal of why you're learning it and that will help you then stick with it which is really important and so if those things kind of spark your interest then python is great but if on the other hand you're thinking that you want to learn python because you want to get a job as an ios app developer then you may need to choose a different language so having a clear picture of what you want to do with python at the end will really help you stay motivated and just kind of stick with it when things get a little bit tougher maybe you're looking to change careers or looking to prep for that job that you want really badly those sort of reasons can really push you to learn a lot more and just help you stay focused the important thing is figuring out your why second tip is to learn how you actually learn best at first this concept can be a little bit confusing but it is one of those really essential things that you need to figure out in order to continue to learn python or to learn any other language in the future so everyone kind of has their own techniques for learning and there's no like right or wrong way to do it it all really just depends on how you learn best if you're a more visual person then learning through video based tutorials can help you understand the concepts better than going through a book with no images and no visual input platforms like udemy udacity code academy coursera or treehouse are great and might be more suitable for you they're interactive and you'll get to code along with the instructor as they show you step by step how to solve a problem or code a project from scratch for those of you who love reading and writing you may find videos to be a waste of time but going through the official python documentation or a book will be more your cup of tea you'll get to learn as you read the concept step by step at your own pace and follow the code snippets included the final way is where i think most people find themselves basically utilizing both methods through combining text and video based tutorials going to free codecamp python track learning by reading the concepts doing some challenges and also watching a udemy course to help you understand it a little bit deeper can be really helpful you can also buy a book like automate the boring stuff with python to give you project ideas to work on if you're uncertain about like which method works best for you or which combination of the two methods works best for you then i suggest like trying out both methods in different amounts and experimenting until you figure out what you enjoy the most and how you learn the best now we get into the how to go about learning python specifically so my first tip here is to learn the fundamentals of the language understanding the fundamentals of python is really important because it will set a really strong foundation for you as you start to kind of climb the ladder of learning more and more advanced concepts it may look easy and you may be tempted to kind of skim through this and just jump to the more fun part that's more complex like starting to build projects and stuff like that but don't do that because this is how so many people quit before they even start so what are the fundamentals number one is variables and they're used to store data second we have operators they help to assign compare and add values etc thirdly control flow it uses conditional statements to create the order in which your code will be executed this is things like if else statements and the fourth fundamental concept is functions they're reusable code blocks that performs a specific action when called then we have number five which is data types so here you need to understand how different types of data like numeric sequence mapping booleans and binary types actually work and lastly we have loops and this is used to execute codes several times within a certain condition to put this in perspective in case this sounds like a lot already and you just feel like this is really overwhelming i would say that if you spend a good hour or two on a free youtube tutorial or reading through some article you will get a basic understanding of pretty much all of this to a point where you can write some basic scripts so once you actually understand those fundamentals and you understand when and kind of where to use them then you can start to move on to more advanced topics and you'll be really well set up to move on to those topics if python is not your first programming language then it will be easier for you to grasp object-oriented programming in python since you most likely already know how it works the only difference will be in changing up the syntax which i'm sure will not be that difficult with the clear python documentation but if this is your first time learning about it you will need to take some time to understand concepts like how to create a class how to create an instance variable how to use methods and how inheritance works most of this is essentially just how classes work which is what you need to know and i hope again that this doesn't sound too overwhelming because i promise that once you understand them and how they're used you'll be able to continue advancing not only in python but in any programming language that you want so make sure that you understand object-oriented programming before you dive into more advanced topics like reversing a list or lambda expressions oh and while we're on the topic this video is sponsored by kite kite is a free auto completion engine that uses machine learning to provide the completions which is what makes it stand out and also what makes it the best auto completion engine that i've used one of the most useful features is that kites completions are sorted or ranked by relevance instead of by popularity or by the alphabet this is possible because they're using machine learning to provide the completions it means that you will get suggested completions based on the code that you're actually writing and if you're writing code in python the copilot feature offers documentation lookup so you don't have to constantly google search function signatures and call patterns with kite you can actually write code up to 18 faster and who doesn't want to write code faster right so i highly recommend that you download kite and try it out it's completely free and supports up to 13 programming languages and 16 ides so just give it a go i know that you will like it because i love it let's move on to tip number five which is to learn how to work with data structures full disclosure here i'm not that great at data structures and so for most of the things that i do on this channel you don't really need to know about data structures but if you want to learn python properly or you want to get a job for instance then data structures are really important and they really help you build problem solving skills that are really important for projects that you build and structuring your data and so whether you're working on a big project or a small one it's always good to keep data structures in the back of your head you can go through the data structures like stack queue linked list and trees which are also available in other programming languages get to know how each of them is used and when they're useful they're also used in coding interviews to see how you solve problems platforms like leadcode.com or hackerrank.com are the most popular ones to solve data structure and algorithm questions and instead of doing like 50 questions in one go i would suggest doing one to two questions in a day and then you'll be ready enough to walk confidently into a coding interview and i suggest putting in an hour or two into this five days a week at the start and it's actually a lot of fun so i think that you may find yourself spending way more time on this by accident if you want to become a great pythonista or programmer in general then learning to solve problems is really important because solving problems is like 70 of what a python developer does on a daily basis when you run into a problem figure out a way to break it down in a small part as possible because that will help you not to be too overwhelmed and help you actually solve the problem like i said in the previous tip problem solving really helps you build a way of thinking like you almost become a computational thinking system when you find a problem try to solve it first before asking or looking for help when it becomes more challenging you can google for the solution platforms like stack overflow will be really useful for you here and try to form a love for solving problems the more you practice them the better you become and there's no shortcut for it or fast track method it's just solving challenges until you start to think like a programmer which may sound harder than it actually is mostly thinking like a programmer is just about breaking problems down as much as you possibly can until it is as basic as possible like i mentioned platforms like hacker rank and leaked code will really help you with that joining a community can be a really important thing that can really help you grow a lot faster in your learning journey so finding people that are on the same journey as you and connecting with them can actually be really helpful and it's really good to have people around you that actually understand your struggles and that are going through them themselves or have recently gone through them because then you guys can kind of help each other out and give each other pointers to improve and grow there are lots of different platforms out there to connect with pythonistas such as meetups in your local area and if you're new and you don't know anyone you can join the online community and follow people who are learning python as well or who know python and you never know you might get connected with senior developers in different companies who can help you kickstart your career a good place to start is joining the pythonista cafe community it's a peer-to-peer learning community for python enthusiasts they will give you the right support system to help you grow your python skills and also you can join my discord channel i will link it below where you'll find an engaging community that wants everyone to grow and build their skills tip number eight is a non-obvious one but it's really useful and that is to share your knowledge with others as you're learning this will help you understand the concepts that you're trying to teach and it will push you out of your comfort zone there are many ways you can share your knowledge and teach others you can start a youtube channel like mine and show people how you created your projects and it doesn't have to be super complex you can start by just creating something small like a snake game tic-tac-toe music player or even an instagram photo downloader if you're not too comfortable with making videos you can start a blog on different platforms like dev.2 hash node daily dev or medium and don't worry if you're not an experienced python developer just start where you're at and then keep growing and keep building as you grow your skills if you're learning python together with a friend then you can take turns kind of explaining different concepts to each other as you're learning them and i really cannot oversell this enough because there's so many times when i've been sitting somewhere like studying something and reading a certain concept and then i've been like well yeah i understand this and then a friend of mine have asked me like well can you explain it to me and then i'll be like yeah sure i'll explain it to you yeah so the way it works is that you take the um you take the the first thing is no the first you'd p um can i just go back and read it so yeah it's been like that where i basically i thought i knew it and then when i tried to explain it i realized that i don't understand it at all so trying to explain to other people can really help you understand what you actually understand and what you don't understand tip number nine is to contribute to open source projects and it's never too early to contribute to open source and you may feel like a beginner you may feel like you can't really start doing that yet but there's so many open source projects out there that are just looking for volunteers and that would be super appreciative of any help that they can get so i think that's a really good way for you to start even if it's a little bit intimidating and it's also a really good way to start learning about git and improving your git workflow which will be really important once you get employed somewhere so it's never too early to get started here's a list of great open source projects to get you started number one tensorflow and tensorflow is a machine learning framework and if you're interested in machine learning or deep learning it's a great place to get started number two is flask this is a lightweight web framework written in python it helps you to quickly start and scale your application as it grows and then we have django and django is also a web framework built with python and this uses the model template view pattern or mtv pattern and then we have keras and keras is a neural network library written in python and this runs on top of tensorflow theano or cntk number five is youtube dl youtubedl is a command line program that helps download videos from youtube and other sites number six face recognition it recognizes and manipulates faces from python or from the command line with the world's smallest face recognition library number seven ansible and ansible is an open source tool that handles configuration management and deployment of your system or applications number eight httpi hddpi is a command line http client that aims in making cli interaction human friendly it can be used for debugging interacting with http servers or even testing number nine pandas pandas is a python package that provides fast flexible expressive data structures created to make working with relational or labeled data easy number 10 scikit learn scikit-learn is a python library for machine learning that's built on top of scipy on top of these projects you can also make your own open source project and let others contribute you'll get to learn more about how to manage a project as a maintainer and do quality code reviews to contributors and this is really really useful alright so i hope that the tips that i mention in this video will really help you accelerate your journey towards learning python and for all the resources that i mentioned i will leave links to that in the description in case you want to check it out and in case there's anything that you feel like i missed or that should be added to this then feel free to leave that in the comment section so that other people can kind of see it and check it out as well and before we head off i just want to say thank you to jane tracy for writing the script for this video which i thought was really great i hope that you thought so too so leave some appreciation for her in the comment section as well if you want to and she also has a really great blog about programming that i will leave a link to in the description that i think you really should check out and yeah that's it for this one i hope you enjoyed it and i hope i'll see you in the next one